name: Deploy API .NET para AWS Elastic Beanstalk

on:
  push:
    branches:
      - development # Para build e testes
      - master      # Para build, testes e deploy para produção

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY_NAME: crm-api-repo
  EB_APPLICATION_NAME: crm-api-app
  EB_ENVIRONMENT_NAME: crm-api-env-production

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restaurar dependências
        run: dotnet restore src/CRM-API.sln

      - name: Build da API
        run: dotnet build src/CRM-API.sln --no-restore --configuration Release

      - name: Executar Testes Unitários
        run: dotnet test src/CRM.Tests/CRM.Tests.csproj --no-build --verbosity normal --configuration Release

      - name: Configurar credenciais AWS (via OIDC)
        if: github.ref == 'refs/heads/master'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login no Amazon ECR
        if: github.ref == 'refs/heads/master'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build e Push da imagem Docker para ECR
        if: github.ref == 'refs/heads/master'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:$IMAGE_TAG
          docker tag $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:latest
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:latest
        shell: bash

      - name: Instalar AWS Elastic Beanstalk CLI
        if: github.ref == 'refs/heads/master'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install awsebcli --upgrade --user
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        shell: bash

      - name: Criar Dockerrun.aws.json
        if: github.ref == 'refs/heads/master'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG_FOR_EB: latest
        run: |
          cat > Dockerrun.aws.json <<EOF
          {
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ env.IMAGE_TAG_FOR_EB }}",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": 80
              }
            ],
            "Logging": "/var/log/nginx"
          }
          EOF
          echo "Dockerrun.aws.json criado com sucesso."
        shell: bash

      - name: Gerar pacote de deploy
        if: github.ref == 'refs/heads/master'
        run: |
          zip deploy.zip Dockerrun.aws.json
          echo "Conteúdo do deploy.zip:"
          unzip -l deploy.zip
        shell: bash

      - name: Deploy para AWS Elastic Beanstalk (via AWS CLI)
        if: github.ref == 'refs/heads/master'
        run: |
          eb init ${{ env.EB_APPLICATION_NAME }} --region ${{ env.AWS_REGION }} --platform docker --no-verify-ssl
          eb use ${{ env.EB_ENVIRONMENT_NAME }}
          eb deploy --label ${{ github.sha }} --source deploy.zip
        shell: bash

      - name: Enviar Notificação por E-mail (Sucesso)
        if: github.ref == 'refs/heads/master' && success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER_ADDRESS }}
          server_port: ${{ secrets.MAIL_SERVER_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: '[Deploy Sucesso] API CRM - ${{ github.ref_name }}'
          body: |
            O deploy da API CRM para o ambiente ${{ env.EB_ENVIRONMENT_NAME }} foi concluído com sucesso!
            Branch: ${{ github.ref_name }}
            Commit SHA: ${{ github.sha }}
            Link do Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.MAIL_RECIPIENT_EMAIL }}
          from: GitHub Actions <${{ secrets.MAIL_USERNAME }}>
          enable_starttls: true

      - name: Enviar Notificação por E-mail (Falha)
        if: github.ref == 'refs/heads/master' && failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER_ADDRESS }}
          server_port: ${{ secrets.MAIL_SERVER_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: '[Deploy FALHA] API CRM - ${{ github.ref_name }}'
          body: |
            O deploy da API CRM para o ambiente ${{ env.EB_ENVIRONMENT_NAME }} FALHOU!
            Branch: ${{ github.ref_name }}
            Commit SHA: ${{ github.sha }}
            Link do Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Verifique os logs para mais detalhes.
          to: ${{ secrets.MAIL_RECIPIENT_EMAIL }}
          from: GitHub Actions <${{ secrets.MAIL_USERNAME }}>
          enable_starttls: true
