# .github/workflows/ci.yml
name: CI/CD da API CRM

on:
  push:
    branches:
      - master

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY_NAME: crm-api-repo
  EB_APPLICATION_NAME: crm-api-app
  EB_ENVIRONMENT_NAME: crm-api-env-production

permissions:
  id-token: write
  contents: read

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          cache: false

      - name: Restaurar dependências
        run: dotnet restore src/CRM-API.sln

      - name: Construir projeto
        run: dotnet build src/CRM-API.sln --no-restore --configuration Release

      - name: Executar testes
        run: dotnet test src/CRM.Tests/CRM.Tests.csproj --no-build --verbosity normal --configuration Release

      - name: Configurar Credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::679625722040:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Login no Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Build e Push da Imagem Docker
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG

          # Também tag com :latest e push (para que o EB sempre puxe a última)
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_NAME:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:latest

      - name: Instalar EB CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install awsebcli --upgrade --user
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Criar Dockerrun.aws.json
        env:
          IMAGE_TAG_FOR_EB: latest 
        run: |
          cat > Dockerrun.aws.json <<EOF
          {
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME}}:${{ env.IMAGE_TAG_FOR_EB }}",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": 80
              }
            ],
            "Logging": "/var/log/nginx"
          }
          EOF
          echo "Dockerrun.aws.json criado com sucesso."

      - name: Gerar pacote de deploy
        run: |
          zip -r deploy.zip Dockerrun.aws.json
          echo "deploy.zip criado com sucesso, contendo apenas Dockerrun.aws.json."

      - name: Configurar EB CLI (eb init e eb use)
        run: |
          eb init ${{ env.EB_APPLICATION_NAME }} --region ${{ env.AWS_REGION }} --platform docker
          eb use ${{ env.EB_ENVIRONMENT_NAME }}

      - name: Deploy para Elastic Beanstalk
        run: |
          eb deploy --label ${{ github.sha }} --timeout 10 # Adicionado timeout para evitar espera infinita

      - name: Enviar notificação de sucesso
        uses: dawidd6/action-send-mail@v3
        if: success()
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: '[Deploy SUCESSO] API CRM - master'
          body: |
            O deploy da API CRM para o ambiente ${{ env.EB_ENVIRONMENT_NAME }} foi concluído com SUCESSO!
            Branch: master
            Commit SHA: ${{ github.sha }}
            Link do Workflow: https://github.com/luizgoebel/CRM-Gerenciamento/actions/runs/${{ github.run_id }}
          to: ${{ secrets.MAIL_TO }}
          from: GitHub Actions <github-actions@github.com>
          enable_starttls: true

      - name: Enviar notificação de falha
        uses: dawidd6/action-send-mail@v3
        if: failure()
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: '[Deploy FALHA] API CRM - master'
          body: |
            O deploy da API CRM para o ambiente ${{ env.EB_ENVIRONMENT_NAME }} FALHOU!
            Branch: master
            Commit SHA: ${{ github.sha }}
            Link do Workflow: https://github.com/luizgoebel/CRM-Gerenciamento/actions/runs/${{ github.run_id }}
            Verifique os logs para mais detalhes.
          to: ${{ secrets.MAIL_TO }}
          from: GitHub Actions <github-actions@github.com>
          enable_starttls: true