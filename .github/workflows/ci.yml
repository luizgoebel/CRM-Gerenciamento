name: Deploy API .NET para AWS Elastic Beanstalk (via AWS CLI)

on:
  push:
    branches:
      - development
      - master # Você pode optar por implantar apenas da master para produção

env:
  AWS_REGION: us-east-2 # Sua região AWS
  ECR_REPOSITORY_NAME: crm-api-repo # NOME REAL DO SEU REPOSITÓRIO ECR
  EB_APPLICATION_NAME: crm-api-app # Nome da aplicação Elastic Beanstalk que você criou
  EB_ENVIRONMENT_NAME: crm-api-env # Nome do ambiente Elastic Beanstalk que você criou

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write' # Necessário para o OIDC

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restaurar dependências
        run: dotnet restore src/CRM-API.sln

      - name: Build da API
        run: dotnet build src/CRM-API.sln --no-restore --configuration Release

      - name: Executar Testes Unitários
        run: dotnet test src/CRM.Tests/CRM.Tests.csproj --no-build --verbosity normal --configuration Release
        continue-on-error: true # Permite que o workflow continue mesmo se os testes falharem

      - name: Configurar credenciais AWS (via OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }} # Sua role de deploy do GitHub Actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Login no Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build e Push da imagem Docker para ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: .
        run: |
          # Build e push com a tag SHA do commit
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:$IMAGE_TAG

          # Também tag com :latest e push (para que o EB sempre puxe a última)
          docker tag $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:latest
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:latest
        shell: bash

      - name: Instalar AWS Elastic Beanstalk CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install awsebcli --upgrade --user
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        shell: bash

      - name: Criar Dockerrun.aws.json
        id: create-dockerrun
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # Usamos a tag :latest no Dockerrun.aws.json para que o EB sempre puxe a última
          IMAGE_TAG_FOR_EB: latest 
        run: |
          cat > Dockerrun.aws.json <<EOF
          {
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ env.IMAGE_TAG_FOR_EB }}",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": 80
              }
            ],
            "Logging": "/var/log/nginx"
          }
          EOF
          echo "Dockerrun.aws.json criado com sucesso."
        shell: bash

      - name: Gerar pacote de deploy
        run: |
          zip -r deploy.zip Dockerrun.aws.json
        shell: bash

      - name: Deploy para AWS Elastic Beanstalk (via AWS CLI)
        run: |
          eb init ${{ env.EB_APPLICATION_NAME }} --region ${{ env.AWS_REGION }} --platform docker --no-verify-ssl
          eb use ${{ env.EB_ENVIRONMENT_NAME }}
          eb deploy --label ${{ github.sha }}
        shell: bash
