name: Deploy API .NET para AWS Elastic Beanstalk

on:
  push:
    branches:
      - development
      - master # Você pode optar por implantar apenas da master para produção

env:
  AWS_REGION: us-east-2 # Sua região AWS
  ECR_REPOSITORY_NAME: crm-api-repo # NOME REAL DO SEU REPOSITÓRIO ECR
  EB_APPLICATION_NAME: crm-api-app # Nome da aplicação Elastic Beanstalk que você criou
  EB_ENVIRONMENT_NAME: crm-api-env # Nome do ambiente Elastic Beanstalk que você criou

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write' # Necessário para o OIDC

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Listar arquivos para depuração
        run: |
          echo "Conteúdo da raiz do repositório:"
          ls -F
          echo "Conteúdo de src/:"
          ls -F src/
          echo "Conteúdo de src/CRM.API/:"
          ls -F src/CRM.API/ || true
          echo "Conteúdo de src/CRM.Tests/:"
          ls -F src/CRM.Tests/ || true
        shell: bash

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restaurar dependências
        run: dotnet restore src/CRM-API.sln

      - name: Build da API e Testes
        run: dotnet build src/CRM-API.sln --no-restore --configuration Release

      - name: Testar API (se houver testes unitários)
        run: dotnet test src/CRM.Tests/CRM.Tests.csproj --no-build --verbosity normal --configuration Release
        continue-on-error: true

      - name: Configurar credenciais AWS (via OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }} # Sua role de deploy do GitHub Actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Login no Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build e Push da imagem Docker para ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: .
        run: |
          # O Dockerfile deve estar na raiz do seu repositório ou você precisa especificar o caminho
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:$IMAGE_TAG
        shell: bash

      - name: Deploy para AWS Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          application_name: ${{ env.EB_APPLICATION_NAME }}
          environment_name: ${{ env.EB_ENVIRONMENT_NAME }}
          version_label: ${{ github.sha }}
          region: ${{ env.AWS_REGION }}
          # Adicionando as credenciais AWS diretamente para esta ação
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # Não é necessário 'deployment_package' se a imagem já estiver no ECR
          # e o Elastic Beanstalk estiver configurado para Docker.
          # A imagem será puxada do ECR pelo Elastic Beanstalk.
          # Certifique-se de que a role de instância do EC2 (aws-elasticbeanstalk-ec2-role)
          # tem permissões para puxar imagens do ECR (AmazonEC2ContainerRegistryReadOnly).
