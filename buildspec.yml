version: 0.2

# Define as variáveis de ambiente que serão usadas no build.
# AWS_ACCOUNT_ID será preenchido automaticamente pelo CodeBuild.
env:
  variables:
    AWS_REGION: us-east-2
    AWS_ACCOUNT_ID: 679625722040
    ECR_REPOSITORY_NAME: crm-api-repo

phases:
  install:
    commands:
      # Instala o .NET SDK 8.0. O CodeBuild já tem algumas imagens com o .NET,
      # mas esta etapa garante que a versão correta esteja disponível.
      # Para imagens Ubuntu, dotnet-sdk-8.0 deve ser suficiente.
      - echo "Instalando .NET SDK..."
      - apt-get update -y
      - apt-get install -y dotnet-sdk-8.0

      # Instala o utilitário 'zip' se não estiver presente.
      - echo "Instalando utilitário zip..."
      - apt-get install -y zip

  pre_build:
    commands:
      - echo "Fazendo login no Amazon ECR..."
      - echo "AWS_ACCOUNT_ID: $AWS_ACCOUNT_ID"
      - echo "AWS_REGION: $AWS_REGION"
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

  build:
    commands:
      - echo "Restaurando dependências .NET..."
      - dotnet restore src/CRM-API.sln

      - echo "Construindo a API .NET..."
      - dotnet build src/CRM-API.sln --no-restore --configuration Release

      - echo "Executando testes unitários..."
      # IMPORTANTE: Se os testes falharem, o CodeBuild falhará neste ponto,
      # interrompendo o pipeline do CodePipeline.
      - dotnet test src/CRM.Tests/CRM.Tests.csproj --no-build --verbosity normal --configuration Release

      - echo "Construindo e empurrando a imagem Docker para o ECR..."
      # CODEBUILD_RESOLVED_SOURCE_VERSION é uma variável de ambiente do CodeBuild que contém o SHA do commit.
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7) # Pega os primeiros 7 caracteres do SHA do commit
      - docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$IMAGE_TAG -f Dockerfile .
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$IMAGE_TAG

      # Opcional: Tag com :latest para facilitar o pull pelo Elastic Beanstalk
      - docker tag $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:latest
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:latest

      - echo "Criando Dockerrun.aws.json..."
      # Este arquivo informa ao Elastic Beanstalk qual imagem Docker usar.
      # Usamos a tag :latest para que o EB sempre puxe a última imagem.
      - |
        cat > Dockerrun.aws.json <<EOF
        {
          "AWSEBDockerrunVersion": "1",
          "Image": {
            "Name": "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:latest",
            "Update": "true"
          },
          "Ports": [
            {
              "ContainerPort": 80
            }
          ],
          "Logging": "/var/log/nginx"
        }
        EOF
      - echo "Dockerrun.aws.json criado com sucesso."

      - echo "Gerando pacote de deploy (deploy.zip)..."
      # O Elastic Beanstalk espera um pacote de deploy.
      - zip -r deploy.zip Dockerrun.aws.json

artifacts:
  files:
    # Define quais arquivos serão os artefatos de saída do CodeBuild.
    # O CodePipeline usará este 'deploy.zip' para o deploy no Elastic Beanstalk.
    - deploy.zip
  discard-paths: yes # Descarta a estrutura de diretórios, apenas o arquivo zip será o artefato.
